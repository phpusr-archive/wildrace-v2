package com.phpusr.wildrace.parser

import org.junit.Assert
import org.junit.Test

class MessageParserTest {

    private fun assertNullResult(message: String) {
        Assert.assertNull(MessageParser(message).run())
    }

    private fun assertResult(message: String, startSumNumber: Long, distanceList: List<Short>, distance: Short, endSumNumber: Long) {
        val result = MessageParser(message).run()

        Assert.assertEquals(startSumNumber, result!!.startSumNumber)
        Assert.assertEquals(distanceList, result.distanceList)
        Assert.assertEquals(distance, result.distance)
        Assert.assertEquals(endSumNumber, result.endSumNumber)
    }

    @Test
    fun test1() {
        assertNullResult("321 + 12.8 = 500")
        assertResult("321.2 + 12 = 500.12", 2, listOf(12), 12, 500)
    }

    @Test
    fun test2() {
        assertResult("2345+34=15", 2345, listOf(34), 34, 15)
        assertResult("2345 +34=15", 2345, listOf(34), 34, 15)
        assertResult("2345 + 34=15", 2345, listOf(34), 34, 15)
        assertResult("2345 + 34 =15", 2345, listOf(34), 34, 15)
        assertResult("2345 + 34 = 15", 2345, listOf(34), 34, 15)
        assertResult("2345 + 34+200 = 15", 2345, listOf(34, 200), 234, 15)
        assertNullResult("2345 + 34+200k = 15")
    }

    @Test
    fun test3() {
        assertResult("5145+8=5153\n#–¥–∏–∫–∏–π–∑–∞–±–µ–≥", 5145, listOf(8), 8, 5153)
    }

    @Test
    fun test4() {
        assertResult("5127+6+12=5145", 5127, listOf(6, 12), 18, 5145)
    }

    @Test
    fun test5() {
        assertResult("5106 + 6 + 15 = 5127", 5106, listOf(6, 15), 21, 5127)
    }

    @Test
    fun test6() {
        assertResult("5091+4=5095 –∫–º\n\n#–¥–∏–∫–∏–π–∑–∞–±–µ–≥", 5091, listOf(4), 4, 5095)
    }

    @Test
    fun test7() {
        assertResult("5080+6=5086\n" +
                "–î—Ä—É–∑—å—è, –∫—Ç–æ —Å –£—Ñ—ã –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –æ–≥–æ–Ω—ë–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! üòâüòä\n" +
                "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–±–µ–∂–∞–ª–∏—Å—å! üëç\n" +
                "–ü—Ä–∞–≤–¥–∞ —Ç—Ä–µ–∫–µ—Ä –æ–ø—è—Ç—å –∑–∞–≥–ª—é—á–∏–ª–æ, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –≤ –º–æ—é –ø–æ–ª—å–∑—É üòÇüòÅ 3 –∫–º/—á\n" +
                "#–∫–ª—É–±–±–µ–≥–∞–°–ø–∞—Ä—Ç–∞ #–∫–ª—É–±–±–µ–≥–∞–°–ø–∞—Ä—Ç–∞–£—Ñ–∞ #–£—Ñ–∞", 5080, listOf(6), 6, 5086)
    }

    @Test
    fun test8() {
        assertNullResult("–°–¢–ê–¢–ò–°–¢–ò–ö–ê\n" +
                "–£—Ä–∞! –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ö–æ–ª–æ–¥–∞ –∏ —Å–Ω–µ–≥ 5000 –∫–º –ø–æ–∑–∞–¥–∏! –ú—ã - –º–æ–ª–æ–¥—Ü—ã!!\n" +
                "–ò–∑ –Ω–æ–≤–∏—á–∫–æ–≤ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—Å–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∞–≤—Ä—ã –ø–æ–ª—É—á–∞–µ—Ç –Ø–Ω–∞ –ò—à–º–∞–µ–≤–∞ - –°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫! \n\\n" +
                "–ù–∞—à–∏ –∏—Ç–æ–≥–∏ –≤ —Ü–∏—Ñ—Ä–∞—Ö: \n" +
                "1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–µ–≥–∞:\n" +
                "- –≤—Å–µ–≥–æ - 149 –¥–Ω.\n" +
                "- –æ—Ç—Ä–µ–∑–æ–∫ 4000-5000 - 42 –¥–Ω.\n" +
                "2. –ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂:\n" +
                "- —Å—Ä–µ–¥–Ω–∏–π –≤ –¥–µ–Ω—å - 33,5 –∫–º/–¥\n" +
                "- –º–∞–∫—Å–∏–º—É–º –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - 832 –∫–º.\n" +
                "3. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: \n" +
                "- –≤—Å–µ–≥–æ - 727 —Ç—Ä.\n" +
                "- —Å—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å - 4,8 —Ç—Ä./–¥\n" +
                "- –º–∞–∫—Å–∏–º—É–º –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - 76 —Ç—Ä.\n" +
                "4. –ë–µ–≥—É–Ω—ã:\n" +
                "- –≤—Å–µ–≥–æ –æ—Ç–º–µ—Ç–∏–ª–æ—Å—å - 59 —á–µ–ª.\n" +
                "- –æ—Ç–º–µ—Ç–∏–ª–æ—Å—å –Ω–∞ 4000-5000 - 21 —á–µ–ª.\n" +
                "- –Ω–æ–≤—ã—Ö –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ 4000-5000 - 1 —á–µ–ª. \n\n" +
                "–ü–æ—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –Ω–∞ 4000 –∫–º - http://vk.cc/4HAk6E \n" +
                "–°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –Ω–∞ 6000 –∫–º.\n" +
                "–í—Å–µ–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –±–µ–≥–∞!")
    }

    @Test(expected = NumberFormatException::class)
    fun test9() {
        assertResult("0 + 32767 = 32767", 0, listOf(32767), 32767, 32767)
        MessageParser("0 + 32768 = 32768").run()
    }

    @Test
    fun test10() {
        assertResult("999999900 + 100 = 1000000000", 999_999_900, listOf(100), 100, 1_000_000_000)
    }

}